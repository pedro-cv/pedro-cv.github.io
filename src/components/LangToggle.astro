---
import SpainFlag from "./icons/SpainFlag.astro";
import UnitedStatesFlag from "./icons/UnitedStatesFlag.astro";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const LANGUAGES = [
  {
    id: "en",
    label: t("language.en"),
  },
  {
    id: "es",
    label: t("language.es"),
  },
];
---

<div class="relative px-1">
  <button
    transition:persist
    id="lang-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SpainFlag id="es" class="lang-toggle-icon size-5 transition-all" />
    <UnitedStatesFlag
      id="en"
      class="lang-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <div
    transition:persist
    id="langs-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        LANGUAGES.map((theme) => (
          <li
            data-value={theme.id}
            class="lang-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm"
          >
            {theme.label}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #langs-menu.open {
    display: inline;
    animation: scale-up-cent 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-cent {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  const langsMenu = document.getElementById("langs-menu");

  const getLangPreference = () => {
    return window.location.pathname.includes("es") ? "es" : "en";
  };

  const updateIcon = (langPreference) => {
    document.querySelectorAll(".lang-toggle-icon").forEach((element) => {
      element.style.scale = element.id === langPreference ? "1" : "0";
    });
  };

  const updateLang = () => {
    const langPreference = getLangPreference();

    updateIcon(langPreference);
  };

  updateLang();

  document.addEventListener("click", () => langsMenu.classList.remove("open"));

  document.getElementById("lang-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    const isClosed = !langsMenu.classList.contains("open");
    langsMenu.classList[isClosed ? "add" : "remove"]("open");
  });

  document.querySelectorAll(".lang-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      if (element.dataset.value === getLangPreference()) return;
      element.dataset.value === "es"
        ? (window.location.pathname = "/es")
        : (window.location.pathname = "/");
    });
  });

  document.addEventListener("astro:after-swap", () => {
    updateLang();
    window.scrollTo({ left: 0, top: 0, behavior: "instant" });
  });
</script>
